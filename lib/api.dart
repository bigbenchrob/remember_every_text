// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'frb_generated.dart';

// These functions are ignored because they are not marked as `pub`: `extract_from_rich_link`

/// Synchronous wrapper; FRB can still expose it as a Future on Dart side if you prefer.
String decodeTypedstreamBlob({required List<int> blob}) =>
    RustLib.instance.api.crateApiDecodeTypedstreamBlob(blob: blob);

/// Parse a binary plist file (typically .pluginpayloadattachment)
/// and extract rich link preview metadata
UrlPreviewMetadata parseUrlPreviewPlist({required String filePath}) =>
    RustLib.instance.api.crateApiParseUrlPreviewPlist(filePath: filePath);

/// Rich metadata extracted from URL preview plists
class UrlPreviewMetadata {
  final String? title;
  final String? summary;
  final String? siteName;
  final String? imageUrl;
  final String? videoUrl;
  final String? iconUrl;
  final String? url;

  const UrlPreviewMetadata({
    this.title,
    this.summary,
    this.siteName,
    this.imageUrl,
    this.videoUrl,
    this.iconUrl,
    this.url,
  });

  @override
  int get hashCode =>
      title.hashCode ^
      summary.hashCode ^
      siteName.hashCode ^
      imageUrl.hashCode ^
      videoUrl.hashCode ^
      iconUrl.hashCode ^
      url.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UrlPreviewMetadata &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          summary == other.summary &&
          siteName == other.siteName &&
          imageUrl == other.imageUrl &&
          videoUrl == other.videoUrl &&
          iconUrl == other.iconUrl &&
          url == other.url;
}
